package autonoma.comidadelcielo.views;

import autonoma.comidadelcielo.elements.Sky;
import autonoma.comidadelcielo.utils.GraphicContainer;
import autonoma.comidadelcielo.utils.Sprite;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Rectangle;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.io.IOException;
import javax.swing.JOptionPane;

public class Window extends javax.swing.JFrame implements GraphicContainer{

    private Sky sky;
    private boolean finished = false;
    private BufferedImage imageBuffer;
    private Graphics graphicsBuffer;
    public static final int WIDTH = 480;
    public static final int HEIGHT = 480;

    public Window(Sky sky) {
        this.sky = sky;
        initComponents();
        this.imageBuffer = new BufferedImage(WIDTH, HEIGHT, BufferedImage.TYPE_INT_RGB);
        this.graphicsBuffer = this.imageBuffer.getGraphics();
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */

    private void exitGame() {
        System.exit(0);
    }

    public void setSky(Sky sky) {
        this.sky = sky;
    }

    public void win() {
        this.finished = false;
        JOptionPane.showMessageDialog(null, "You won! Your score was: " + this.sky.getScore());
    }

    @Override
    public void update(Graphics g) {
        sky.paint(graphicsBuffer);
        g.drawImage(imageBuffer, 0, 0, this);
    }

    @Override
    public void paint(Graphics g) {
        update(g);
    }

    @SuppressWarnings("unchecked")
    private void initComponents() {
        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }

    private void formKeyPressed(java.awt.event.KeyEvent evt) {
        if (evt.getKeyCode() == KeyEvent.VK_Q) {
            exitGame();
        }
        repaint();
    }

    private void formMouseClicked(java.awt.event.MouseEvent evt) {
        if (evt.getButton() == MouseEvent.BUTTON1) {
            int x = evt.getX();
            int y = evt.getY();
            try {
                this.sky.catchSprite(x, y);
            } catch (IOException ev) {
                System.out.println("Error retrieving file information.");
            }
        }

        if (!finished && this.sky.getFoodAmount() == 0) {
            finished = true;
            this.win();
            this.dispose();
        }

        if (!finished && this.sky.getScore() < 0) {
            this.finished = false;
            JOptionPane.showMessageDialog(null, "You lost! Your score was below 0: " + this.sky.getScore());
            this.dispose();
        }
        refresh();
    }

    @Override
    public void refresh() {
        this.repaint();
    }

    @Override
    public Rectangle getBoundaries() {
        return this.getBounds();
    }
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
